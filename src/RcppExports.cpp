// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// get_partial_correlation
double get_partial_correlation(arma::mat C, int i, int j, arma::uvec k);
RcppExport SEXP _LocalFCI_get_partial_correlation(SEXP CSEXP, SEXP iSEXP, SEXP jSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(get_partial_correlation(C, i, j, k));
    return rcpp_result_gen;
END_RCPP
}
// fisherZ
double fisherZ(double pc, int n, int k_size);
RcppExport SEXP _LocalFCI_fisherZ(SEXP pcSEXP, SEXP nSEXP, SEXP k_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type pc(pcSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k_size(k_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(fisherZ(pc, n, k_size));
    return rcpp_result_gen;
END_RCPP
}
// condIndTest
List condIndTest(arma::mat& C, const int& i, const int& j, const arma::uvec& k, const int& n, const double& signif_level);
RcppExport SEXP _LocalFCI_condIndTest(SEXP CSEXP, SEXP iSEXP, SEXP jSEXP, SEXP kSEXP, SEXP nSEXP, SEXP signif_levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const int& >::type i(iSEXP);
    Rcpp::traits::input_parameter< const int& >::type j(jSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type signif_level(signif_levelSEXP);
    rcpp_result_gen = Rcpp::wrap(condIndTest(C, i, j, k, n, signif_level));
    return rcpp_result_gen;
END_RCPP
}
// get_current_edges
NumericVector get_current_edges(int i, int p, NumericMatrix graph);
RcppExport SEXP _LocalFCI_get_current_edges(SEXP iSEXP, SEXP pSEXP, SEXP graphSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type graph(graphSEXP);
    rcpp_result_gen = Rcpp::wrap(get_current_edges(i, p, graph));
    return rcpp_result_gen;
END_RCPP
}
// combn_cpp
NumericMatrix combn_cpp(NumericVector x, int l);
RcppExport SEXP _LocalFCI_combn_cpp(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(combn_cpp(x, l));
    return rcpp_result_gen;
END_RCPP
}
// get_neighbors_from_dag
NumericVector get_neighbors_from_dag(int i, int p, NumericMatrix true_dag);
RcppExport SEXP _LocalFCI_get_neighbors_from_dag(SEXP iSEXP, SEXP pSEXP, SEXP true_dagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type true_dag(true_dagSEXP);
    rcpp_result_gen = Rcpp::wrap(get_neighbors_from_dag(i, p, true_dag));
    return rcpp_result_gen;
END_RCPP
}
// create_conditioning_sets_efficient_cpp2
List create_conditioning_sets_efficient_cpp2(NumericVector& neighbors);
RcppExport SEXP _LocalFCI_create_conditioning_sets_efficient_cpp2(SEXP neighborsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type neighbors(neighborsSEXP);
    rcpp_result_gen = Rcpp::wrap(create_conditioning_sets_efficient_cpp2(neighbors));
    return rcpp_result_gen;
END_RCPP
}
// fci_setup
List fci_setup(NumericMatrix& true_dag, const NumericVector& targets, StringVector& names, const int& lmax, bool& verbose);
RcppExport SEXP _LocalFCI_fci_setup(SEXP true_dagSEXP, SEXP targetsSEXP, SEXP namesSEXP, SEXP lmaxSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type true_dag(true_dagSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< StringVector& >::type names(namesSEXP);
    Rcpp::traits::input_parameter< const int& >::type lmax(lmaxSEXP);
    Rcpp::traits::input_parameter< bool& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(fci_setup(true_dag, targets, names, lmax, verbose));
    return rcpp_result_gen;
END_RCPP
}
// change_S_efficient
void change_S_efficient(List& S, int i, int j, NumericVector sep);
RcppExport SEXP _LocalFCI_change_S_efficient(SEXP SSEXP, SEXP iSEXP, SEXP jSEXP, SEXP sepSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sep(sepSEXP);
    change_S_efficient(S, i, j, sep);
    return R_NilValue;
END_RCPP
}
// change_S_0_efficient
void change_S_0_efficient(List& S, int i, int j);
RcppExport SEXP _LocalFCI_change_S_0_efficient(SEXP SSEXP, SEXP iSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    change_S_0_efficient(S, i, j);
    return R_NilValue;
END_RCPP
}
// get_potential_sep
NumericVector get_potential_sep(const int& i, const int& j, const NumericVector& neighborhood, const int& p, const NumericMatrix& true_dag);
RcppExport SEXP _LocalFCI_get_potential_sep(SEXP iSEXP, SEXP jSEXP, SEXP neighborhoodSEXP, SEXP pSEXP, SEXP true_dagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type i(iSEXP);
    Rcpp::traits::input_parameter< const int& >::type j(jSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type neighborhood(neighborhoodSEXP);
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type true_dag(true_dagSEXP);
    rcpp_result_gen = Rcpp::wrap(get_potential_sep(i, j, neighborhood, p, true_dag));
    return rcpp_result_gen;
END_RCPP
}
// check_separation_sample_efficient
void check_separation_sample_efficient(const int& l, const int& i, const int& j, const NumericMatrix& kvals, NumericVector& sep, NumericMatrix true_dag, const StringVector& names, const NumericVector& neighborhood, NumericMatrix C, List S, double& pval, int& num_tests, arma::mat& R, int& n, double& signif_level, bool& verbose);
RcppExport SEXP _LocalFCI_check_separation_sample_efficient(SEXP lSEXP, SEXP iSEXP, SEXP jSEXP, SEXP kvalsSEXP, SEXP sepSEXP, SEXP true_dagSEXP, SEXP namesSEXP, SEXP neighborhoodSEXP, SEXP CSEXP, SEXP SSEXP, SEXP pvalSEXP, SEXP num_testsSEXP, SEXP RSEXP, SEXP nSEXP, SEXP signif_levelSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type l(lSEXP);
    Rcpp::traits::input_parameter< const int& >::type i(iSEXP);
    Rcpp::traits::input_parameter< const int& >::type j(jSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type kvals(kvalsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type sep(sepSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type true_dag(true_dagSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type names(namesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type neighborhood(neighborhoodSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type C(CSEXP);
    Rcpp::traits::input_parameter< List >::type S(SSEXP);
    Rcpp::traits::input_parameter< double& >::type pval(pvalSEXP);
    Rcpp::traits::input_parameter< int& >::type num_tests(num_testsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< double& >::type signif_level(signif_levelSEXP);
    Rcpp::traits::input_parameter< bool& >::type verbose(verboseSEXP);
    check_separation_sample_efficient(l, i, j, kvals, sep, true_dag, names, neighborhood, C, S, pval, num_tests, R, n, signif_level, verbose);
    return R_NilValue;
END_RCPP
}
// makeFinalGraph
void makeFinalGraph(NumericMatrix& G, NumericMatrix& C, NumericVector& neighborhood, const int& N);
RcppExport SEXP _LocalFCI_makeFinalGraph(SEXP GSEXP, SEXP CSEXP, SEXP neighborhoodSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type G(GSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type C(CSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type neighborhood(neighborhoodSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    makeFinalGraph(G, C, neighborhood, N);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_LocalFCI_get_partial_correlation", (DL_FUNC) &_LocalFCI_get_partial_correlation, 4},
    {"_LocalFCI_fisherZ", (DL_FUNC) &_LocalFCI_fisherZ, 3},
    {"_LocalFCI_condIndTest", (DL_FUNC) &_LocalFCI_condIndTest, 6},
    {"_LocalFCI_get_current_edges", (DL_FUNC) &_LocalFCI_get_current_edges, 3},
    {"_LocalFCI_combn_cpp", (DL_FUNC) &_LocalFCI_combn_cpp, 2},
    {"_LocalFCI_get_neighbors_from_dag", (DL_FUNC) &_LocalFCI_get_neighbors_from_dag, 3},
    {"_LocalFCI_create_conditioning_sets_efficient_cpp2", (DL_FUNC) &_LocalFCI_create_conditioning_sets_efficient_cpp2, 1},
    {"_LocalFCI_fci_setup", (DL_FUNC) &_LocalFCI_fci_setup, 5},
    {"_LocalFCI_change_S_efficient", (DL_FUNC) &_LocalFCI_change_S_efficient, 4},
    {"_LocalFCI_change_S_0_efficient", (DL_FUNC) &_LocalFCI_change_S_0_efficient, 3},
    {"_LocalFCI_get_potential_sep", (DL_FUNC) &_LocalFCI_get_potential_sep, 5},
    {"_LocalFCI_check_separation_sample_efficient", (DL_FUNC) &_LocalFCI_check_separation_sample_efficient, 16},
    {"_LocalFCI_makeFinalGraph", (DL_FUNC) &_LocalFCI_makeFinalGraph, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_LocalFCI(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
